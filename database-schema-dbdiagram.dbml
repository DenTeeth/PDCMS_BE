// ============================================
// DENTAL CLINIC MANAGEMENT SYSTEM - DATABASE SCHEMA
// Hệ Thống Quản Lý Phòng Khám Nha Khoa
// Generated: 2025-01-29
// Database: PostgreSQL 14+
// Architecture: Base Roles + Role Hierarchy
// ============================================
//
// Copy paste toàn bộ file này vào https://dbdiagram.io
// để xem ERD diagram đầy đủ
//
// ============================================

// ============================================
// CORE TABLES - Quản lý tài khoản và phân quyền
// ============================================

Table base_roles {
  base_role_id integer [primary key, increment, note: 'ID base role (1=admin, 2=employee, 3=patient)']
  base_role_name varchar(50) [unique, not null, note: 'Tên: admin, employee, patient']
  default_home_path varchar(255) [not null, note: 'Default path: /admin/dashboard, /app/dashboard, /patient/dashboard']
  description text [note: 'Mô tả base role']
  is_active boolean [default: true, note: 'Trạng thái kích hoạt']
  created_at timestamp [default: 'NOW()', note: 'Ngày tạo']
  updated_at timestamp [note: 'Ngày cập nhật']

  note: 'Base Roles - 3 loại cố định xác định layout FE và default home path'
}

Table accounts {
  account_id integer [primary key, increment, note: 'ID tài khoản']
  account_code varchar(20) [unique, not null, note: 'Mã tài khoản (ACC001, ACC002,...)']
  username varchar(50) [unique, not null, note: 'Tên đăng nhập']
  email varchar(100) [unique, not null, note: 'Email']
  password varchar(255) [not null, note: 'Mật khẩu đã mã hóa BCrypt']
  role_id varchar(50) [not null, note: 'Foreign Key → roles.role_id (SINGLE ROLE)']
  status varchar(20) [default: 'ACTIVE', note: 'ACTIVE, INACTIVE, LOCKED']
  created_at timestamp [default: 'NOW()', note: 'Ngày tạo']
  updated_at timestamp [note: 'Ngày cập nhật']

  indexes {
    username
    email
    role_id
  }

  note: 'Bảng tài khoản - Mỗi account có DUY NHẤT 1 role'
}

Table roles {
  role_id varchar(50) [primary key, note: 'ID vai trò (ROLE_DOCTOR, ROLE_ADMIN,...)']
  role_name varchar(50) [unique, not null, note: 'Tên vai trò hiển thị']
  base_role_id integer [not null, note: 'Foreign Key → base_roles.base_role_id']
  home_path_override varchar(255) [note: 'Override path (nullable, use base_role default if null)']
  description text [note: 'Mô tả vai trò']
  requires_specialization boolean [default: false, note: 'Role có yêu cầu chuyên khoa không']
  is_active boolean [default: true, note: 'Trạng thái kích hoạt']
  created_at timestamp [default: 'NOW()', note: 'Ngày tạo']
  updated_at timestamp [note: 'Ngày cập nhật']

  indexes {
    base_role_id
  }

  note: 'Bảng vai trò - Thuộc 1 base_role, có thể override home_path'
}

Table permissions {
  permission_id varchar(100) [primary key, note: 'ID quyền (VIEW_PATIENT, CREATE_APPOINTMENT,...)']
  permission_name varchar(100) [unique, not null, note: 'Tên quyền hiển thị']
  module varchar(50) [note: 'Module chức năng (APPOINTMENT, PATIENT,...)']
  description text [note: 'Mô tả quyền']
  path varchar(255) [note: 'Đường dẫn sidebar (NULL = quyền hành động, không hiển thị)']
  icon varchar(50) [note: 'Tên icon cho sidebar']
  display_order integer [note: 'Thứ tự hiển thị trong sidebar']
  parent_permission_id varchar(100) [note: 'Foreign Key → permissions.permission_id (Parent-Child)']
  is_active boolean [default: true, note: 'Trạng thái kích hoạt']
  created_at timestamp [default: 'NOW()', note: 'Ngày tạo']
  updated_at timestamp [note: 'Ngày cập nhật']

  indexes {
    module
    parent_permission_id
  }

  note: 'Bảng quyền - Hỗ trợ parent-child hierarchy'
}

Table role_permissions {
  role_id varchar(50) [primary key, note: 'Foreign Key → roles.role_id']
  permission_id varchar(100) [primary key, note: 'Foreign Key → permissions.permission_id']

  indexes {
    (role_id, permission_id) [pk]
  }

  note: 'Bảng junction - Ánh xạ quyền cho từng role'
}

// ============================================
// EMPLOYEE TABLES - Quản lý nhân viên
// ============================================

Table employees {
  employee_id integer [primary key, increment, note: 'ID nhân viên']
  account_id integer [unique, not null, note: 'Foreign Key → accounts.account_id']
  employee_code varchar(20) [unique, not null, note: 'Mã nhân viên (EMP001, EMP002,...)']
  first_name varchar(50) [not null, note: 'Tên']
  last_name varchar(50) [not null, note: 'Họ và tên đệm']
  phone varchar(15) [note: 'Số điện thoại']
  date_of_birth date [note: 'Ngày sinh']
  address text [note: 'Địa chỉ']
  employment_type varchar(20) [note: 'FULL_TIME, PART_TIME']
  is_active boolean [default: true, note: 'Trạng thái hoạt động']
  created_at timestamp [default: 'NOW()', note: 'Ngày tạo']
  updated_at timestamp [note: 'Ngày cập nhật']

  indexes {
    account_id
    employee_code
  }

  note: 'Bảng nhân viên - Role được lưu ở account.role_id'
}

Table specializations {
  specialization_id integer [primary key, increment, note: 'ID chuyên khoa']
  specialization_code varchar(20) [unique, not null, note: 'Mã chuyên khoa (SPEC001,...)']
  specialization_name varchar(100) [unique, not null, note: 'Tên chuyên khoa (Implant, Chỉnh nha,...)']
  description text [note: 'Mô tả chuyên khoa']
  is_active boolean [default: true, note: 'Trạng thái kích hoạt']
  created_at timestamp [default: 'NOW()', note: 'Ngày tạo']
  updated_at timestamp [note: 'Ngày cập nhật']

  note: 'Bảng chuyên khoa - Implant, Chỉnh nha, Nội nha,...'
}

Table employee_specializations {
  employee_id integer [primary key, note: 'Foreign Key → employees.employee_id']
  specialization_id integer [primary key, note: 'Foreign Key → specializations.specialization_id']

  indexes {
    (employee_id, specialization_id) [pk]
  }

  note: 'Bảng junction - Nhân viên có thể có nhiều chuyên khoa'
}

// ============================================
// PATIENT TABLES - Quản lý bệnh nhân
// ============================================

Table patients {
  patient_id integer [primary key, increment, note: 'ID bệnh nhân']
  account_id integer [unique, note: 'Foreign Key → accounts.account_id (nullable)']
  patient_code varchar(20) [unique, not null, note: 'Mã bệnh nhân (PAT001, PAT002,...)']
  first_name varchar(50) [not null, note: 'Tên']
  last_name varchar(50) [not null, note: 'Họ và tên đệm']
  email varchar(100) [note: 'Email']
  phone varchar(15) [not null, note: 'Số điện thoại']
  date_of_birth date [note: 'Ngày sinh']
  address text [note: 'Địa chỉ']
  gender varchar(10) [note: 'MALE, FEMALE, OTHER']
  is_active boolean [default: true, note: 'Trạng thái hoạt động']
  created_at timestamp [default: 'NOW()', note: 'Ngày tạo']
  updated_at timestamp [note: 'Ngày cập nhật']

  indexes {
    account_id
    patient_code
    phone
  }

  note: 'Bảng bệnh nhân - account_id nullable (walk-in patients không cần tài khoản)'
}

// ============================================
// WORK SHIFT TABLES - Quản lý ca làm việc
// ============================================

Table work_shifts {
  work_shift_id varchar(50) [primary key, note: 'ID mẫu ca (WKS_MORNING_01,...)']
  shift_name varchar(100) [not null, note: 'Tên ca (Ca Sáng 8h-16h,...)']
  start_time time [not null, note: 'Giờ bắt đầu']
  end_time time [not null, note: 'Giờ kết thúc']
  category varchar(20) [note: 'NORMAL, OVERTIME']
  is_active boolean [default: true, note: 'Trạng thái kích hoạt']
  created_at timestamp [default: 'NOW()', note: 'Ngày tạo']
  updated_at timestamp [note: 'Ngày cập nhật']

  note: 'Bảng mẫu ca làm việc - Templates cho shift registrations'
}

Table shift_registrations {
  registration_id integer [primary key, increment, note: 'ID đăng ký ca']
  employee_id integer [not null, note: 'Foreign Key → employees.employee_id']
  work_shift_id varchar(50) [not null, note: 'Foreign Key → work_shifts.work_shift_id']
  work_date date [not null, note: 'Ngày làm việc']
  status varchar(20) [default: 'PENDING', note: 'PENDING, APPROVED, REJECTED, CANCELLED']
  actual_start_time time [note: 'Giờ check-in thực tế']
  actual_end_time time [note: 'Giờ check-out thực tế']
  notes text [note: 'Ghi chú']
  created_at timestamp [default: 'NOW()', note: 'Ngày tạo']
  updated_at timestamp [note: 'Ngày cập nhật']

  indexes {
    employee_id
    work_date
    status
    (employee_id, work_date)
  }

  note: 'Bảng đăng ký ca làm việc - Nhân viên đăng ký ca cụ thể'
}

Table time_off_requests {
  request_id integer [primary key, increment, note: 'ID yêu cầu nghỉ phép']
  employee_id integer [not null, note: 'Foreign Key → employees.employee_id']
  request_type varchar(20) [not null, note: 'ANNUAL_LEAVE, SICK_LEAVE, UNPAID_LEAVE']
  start_date date [not null, note: 'Ngày bắt đầu nghỉ']
  end_date date [not null, note: 'Ngày kết thúc nghỉ']
  reason text [note: 'Lý do nghỉ']
  status varchar(20) [default: 'PENDING', note: 'PENDING, APPROVED, REJECTED, CANCELLED']
  approved_by integer [note: 'Foreign Key → employees.employee_id (Manager)']
  approved_at timestamp [note: 'Thời điểm phê duyệt']
  rejection_reason text [note: 'Lý do từ chối']
  created_at timestamp [default: 'NOW()', note: 'Ngày tạo']
  updated_at timestamp [note: 'Ngày cập nhật']

  indexes {
    employee_id
    status
    start_date
  }

  note: 'Bảng yêu cầu nghỉ phép - Annual leave, sick leave, unpaid leave'
}

// ============================================
// CONTACT TABLES - Quản lý liên hệ khách hàng
// ============================================

Table customer_contacts {
  contact_id integer [primary key, increment, note: 'ID liên hệ']
  contact_code varchar(20) [unique, not null, note: 'Mã liên hệ (CNT001,...)']
  full_name varchar(100) [not null, note: 'Họ tên khách hàng']
  phone varchar(15) [not null, note: 'Số điện thoại']
  email varchar(100) [note: 'Email']
  address text [note: 'Địa chỉ']
  source varchar(50) [note: 'Nguồn: FACEBOOK, WEBSITE, REFERRAL, WALK_IN']
  status varchar(20) [default: 'NEW', note: 'NEW, CONTACTED, CONVERTED, LOST']
  notes text [note: 'Ghi chú']
  assigned_to integer [note: 'Foreign Key → employees.employee_id (Nhân viên phụ trách)']
  created_at timestamp [default: 'NOW()', note: 'Ngày tạo']
  updated_at timestamp [note: 'Ngày cập nhật']

  indexes {
    phone
    status
    assigned_to
  }

  note: 'Bảng liên hệ khách hàng - Leads/Prospects chưa thành bệnh nhân'
}

Table contact_histories {
  history_id integer [primary key, increment, note: 'ID lịch sử']
  contact_id integer [not null, note: 'Foreign Key → customer_contacts.contact_id']
  contacted_by integer [not null, note: 'Foreign Key → employees.employee_id']
  contact_type varchar(20) [not null, note: 'PHONE, EMAIL, SMS, IN_PERSON']
  contact_date timestamp [not null, note: 'Thời điểm liên hệ']
  notes text [note: 'Nội dung trao đổi']
  result varchar(20) [note: 'SUCCESS, NO_ANSWER, BUSY, SCHEDULED']
  created_at timestamp [default: 'NOW()', note: 'Ngày tạo']

  indexes {
    contact_id
    contacted_by
    contact_date
  }

  note: 'Bảng lịch sử liên hệ - Tracking từng lần tương tác với khách hàng'
}

// ============================================
// AUTHENTICATION TABLES - JWT & Refresh Token
// ============================================

Table refresh_tokens {
  token_id integer [primary key, increment, note: 'ID token']
  token varchar(255) [unique, not null, note: 'Refresh token UUID']
  username varchar(50) [not null, note: 'Tên đăng nhập']
  expires_at timestamp [not null, note: 'Thời điểm hết hạn']
  created_at timestamp [default: 'NOW()', note: 'Ngày tạo']

  indexes {
    token
    username
  }

  note: 'Bảng refresh token - Lưu trữ refresh token để renew access token'
}

Table jwt_blacklist {
  token_id integer [primary key, increment, note: 'ID token']
  token_hash varchar(64) [unique, not null, note: 'SHA-256 hash của JWT token']
  expires_at timestamp [not null, note: 'Thời điểm hết hạn']
  created_at timestamp [default: 'NOW()', note: 'Ngày tạo']

  indexes {
    token_hash
  }

  note: 'Bảng blacklist JWT - Tokens bị logout/revoke'
}

// ============================================
// RELATIONSHIPS - Quan hệ giữa các bảng
// ============================================

// Role → Base Role (Many-to-One)
Ref: roles.base_role_id > base_roles.base_role_id [update: cascade, delete: restrict]

// Account → Role (Many-to-One)
Ref: accounts.role_id > roles.role_id [update: cascade, delete: restrict]

// Permission → Permission (Self-referencing, Parent-Child)
Ref: permissions.parent_permission_id > permissions.permission_id [delete: set null]

// Role ↔ Permission (Many-to-Many via role_permissions)
Ref: role_permissions.role_id > roles.role_id [update: cascade, delete: cascade]
Ref: role_permissions.permission_id > permissions.permission_id [update: cascade, delete: cascade]

// Employee → Account (One-to-One)
Ref: employees.account_id - accounts.account_id [update: cascade, delete: cascade]

// Employee ↔ Specialization (Many-to-Many via employee_specializations)
Ref: employee_specializations.employee_id > employees.employee_id [update: cascade, delete: cascade]
Ref: employee_specializations.specialization_id > specializations.specialization_id [update: cascade, delete: cascade]

// Patient → Account (One-to-One, nullable)
Ref: patients.account_id - accounts.account_id [update: cascade, delete: set null]

// Shift Registration → Employee (Many-to-One)
Ref: shift_registrations.employee_id > employees.employee_id [update: cascade, delete: cascade]

// Shift Registration → Work Shift (Many-to-One)
Ref: shift_registrations.work_shift_id > work_shifts.work_shift_id [update: cascade, delete: restrict]

// Time Off Request → Employee (Many-to-One)
Ref: time_off_requests.employee_id > employees.employee_id [update: cascade, delete: cascade]

// Time Off Request → Approved By Employee (Many-to-One)
Ref: time_off_requests.approved_by > employees.employee_id [delete: set null]

// Customer Contact → Assigned Employee (Many-to-One)
Ref: customer_contacts.assigned_to > employees.employee_id [delete: set null]

// Contact History → Customer Contact (Many-to-One)
Ref: contact_histories.contact_id > customer_contacts.contact_id [update: cascade, delete: cascade]

// Contact History → Contacted By Employee (Many-to-One)
Ref: contact_histories.contacted_by > employees.employee_id [delete: restrict]

// ============================================
// ENUMS - Các giá trị enum trong hệ thống
// ============================================

// Enum cho base_roles.base_role_name
Enum base_role_type {
  admin      // AdminLayout → /admin/dashboard
  employee   // EmployeeLayout → /app/dashboard
  patient    // PatientLayout → /patient/dashboard
}

// Enum cho accounts.status
Enum account_status {
  ACTIVE
  INACTIVE
  LOCKED
}

// Removed: base_role_type enum (now in base_roles table)

// Enum cho employees.employment_type
Enum employment_type {
  FULL_TIME
  PART_TIME
}

// Enum cho patients.gender
Enum gender_type {
  MALE
  FEMALE
  OTHER
}

// Enum cho work_shifts.category
Enum shift_category {
  NORMAL
  OVERTIME
}

// Enum cho shift_registrations.status
Enum registration_status {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
}

// Enum cho time_off_requests.request_type
Enum time_off_type {
  ANNUAL_LEAVE
  SICK_LEAVE
  UNPAID_LEAVE
  MATERNITY_LEAVE
}

// Enum cho time_off_requests.status
Enum time_off_status {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
}

// Enum cho customer_contacts.source
Enum contact_source {
  FACEBOOK
  WEBSITE
  REFERRAL
  WALK_IN
  ADVERTISEMENT
  OTHER
}

// Enum cho customer_contacts.status
Enum contact_status {
  NEW
  CONTACTED
  CONVERTED
  LOST
}

// Enum cho contact_histories.contact_type
Enum contact_type {
  PHONE
  EMAIL
  SMS
  IN_PERSON
  ZALO
  FACEBOOK_MESSENGER
}

// Enum cho contact_histories.result
Enum contact_result {
  SUCCESS
  NO_ANSWER
  BUSY
  SCHEDULED
  NOT_INTERESTED
}

// ============================================
// NOTES - Ghi chú về kiến trúc
// ============================================

// NOTE: Base Role Architecture
// - Mỗi account có DUY NHẤT 1 role (single-role per user)
// - base_role có 3 giá trị cố định: admin, employee, patient
// - base_role xác định Layout component ở Frontend
// - home_path xác định trang chủ sau khi login
//
// Ví dụ:
//   ROLE_DOCTOR: base_role='employee', home_path='/app/dashboard'
//   ROLE_ADMIN: base_role='admin', home_path='/admin/dashboard'
//   ROLE_PATIENT: base_role='patient', home_path='/patient/dashboard'

// NOTE: Parent-Child Permissions
// - permissions.parent_permission_id tạo hierarchy
// - Ví dụ: VIEW_REGISTRATION_ALL (parent) → VIEW_REGISTRATION_OWN (child)
// - Manager có parent permission → Xem tất cả
// - Employee có child permission → Chỉ xem của mình
// - Sidebar chỉ hiển thị top-level permissions (parent_permission_id IS NULL)

// NOTE: Employee vs Patient Accounts
// - employees.account_id: Luôn NOT NULL (nhân viên phải có tài khoản)
// - patients.account_id: Nullable (bệnh nhân walk-in không cần tài khoản)

// ============================================
// END OF SCHEMA
// ============================================
